name: CI
on: [push]
jobs:
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        qt-version: ['5.15.2']
    steps:
      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache-${{ matrix.qt-version }}

      - name: Install Qt
        uses: jurplel/install-qt-action@v2.14.0
        with:
          version: ${{ matrix.qt-version }}
          host: 'windows'
          arch: 'win64_mingw81'
          tools: 'tools_openssl_x64,1.1.1-10,qt.tools.openssl.win_x64'
          aqtversion: '>=2.0.0'
          cached: ${{ steps.cache-qt.outputs.cache-hit }}

      - name: Install Dependencies with Chocolatey
        uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: 'install cmake yasm curl'

      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'
        
      - name: Install cget
        run: pip install cget

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - name: Setup build directory
        run: mkdir build

      - name: Cache cget dependencies
        id: cache-cget
        uses: actions/cache@v2
        with:
          path: build/cget
          key: ${{ runner.os }}-${{ hashFiles('requirements.txt') }}-cget-${{ matrix.qt-version }}

      - name: Init cget
        run: cd build && cget init --shared -DCMAKE_SH="CMAKE_SH-NOTFOUND"

      - name: Install pkgconfig
        run: cd build && cget install pfultz2/pkgconfig
        if: steps.cache-cget.outputs.cache-hit != 'true'

      - name: Install dependencies from requirements.txt
        run: cd build && cget install -G "MinGW Makefiles" --release -DCMAKE_C_FLAGS="-fno-asynchronous-unwind-tables" -f ../requirements.txt
        if: steps.cache-cget.outputs.cache-hit != 'true'

      - name: Run cmake
        run: cd build && cmake .. -G "MinGW Makefiles" -DCMAKE_INSTALL_PREFIX=install

      - name: Make
        run: cd build && mingw32-make -j2

      - name: Copy dlls to test folder
        run: cp .\build\cget\bin\*.dll .\build\tests\

      - name: Tests
        run: cd build && ctest --output-on-failure
        
      - name: Make Install
        run: mingw32-make install -j2
        
      - name: Copy DLLs to install folder
        run: cp .\build\cget\bin\*.dll .\build\install\bin\ && cp ..\Qt\Tools\OpenSSL\Win_x64\bin\*.dll .\build\install\bin
      
      - name: WindeployQt
        run: windeployqt.exe --qmldir ..\Qt\${{ matrix.qt-version }}\mingw81_64\qml .\build\install\bin\gm-companion.exe

      - name: Download librespot
        run: curl -L -o .\build\install\bin\librespot.exe https://github.com/PhilInTheGaps/librespot-bin/releases/download/v0.3.1/librespot-x86_64.exe

      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: .\build\install\bin
          if-no-files-found: error
